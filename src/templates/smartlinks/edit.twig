{% extends "smart-links/_layouts/cp" %}
{% import "_includes/forms" as forms %}
{% set plugin = craft.app.plugins.getPlugin('smart-links') %}
{% set pluginName = plugin.settings.pluginName %}
{% set singularName = pluginName matches '/s$/' ? pluginName|slice(0, -1) : pluginName %}

{% set title = smartLink.id ? smartLink.title : "New {singularName}"|t('smart-links', {singularName: singularName}) %}
{% set fullPageForm = true %}
{% set selectedSubnavItem = 'links' %}
{% set saveShortcutRedirect = 'smart-links/smartlinks/{id}' %}
{% set retainScrollOnSaveShortcut = true %}

{% set tabs = {
    fields: {
        label: 'Content'|t('app'),
        url: '#fields',
    },
} %}

{# Add tabs from field layout #}
{% set fieldLayout = smartLink.getFieldLayout() %}
{% if fieldLayout %}
    {% for tab in fieldLayout.getTabs() %}
        {% set tabId = 'tab-' ~ tab.id %}
        {% set tabs = tabs|merge({
            (tabId): {
                label: tab.name,
                url: '#' ~ tabId,
            }
        }) %}
    {% endfor %}
{% endif %}

{# Only show analytics tab if globally enabled, smart link exists, AND tracking is enabled for this smart link #}
{% if craft.smartLinks.settings.enableAnalytics and smartLink.id and (smartLink.trackAnalytics ?? true) %}
    {% set tabs = tabs|merge({
        analytics: {
            label: 'Analytics'|t('smart-links'),
            url: '#analytics',
        },
    }) %}
{% endif %}

{# Set up breadcrumbs #}
{% set crumbs = [] %}

{# Site switcher (first item) #}
{% if craft.app.getIsMultiSite() %}
    {% set currentSite = craft.app.sites.getSiteById(smartLink.siteId) %}

    {# Get site menu items #}
    {% set siteMenuItems = [] %}
    {% for site in enabledSites %}
        {% set siteMenuItems = siteMenuItems|merge([{
            label: site.name,
            url: smartLink.id ? url('smart-links/smartlinks/' ~ smartLink.id, {site: site.handle}) : url('smart-links/new', {site: site.handle}),
            selected: site.id == smartLink.siteId
        }]) %}
    {% endfor %}

    {% set crumbs = [{
        id: 'site-crumb',
        icon: 'world',
        label: currentSite.name|t('site'),
        menu: {
            items: siteMenuItems,
            label: 'Select site'|t('app')
        }
    }] %}
{% endif %}

{# Main navigation #}
{% set crumbs = crumbs|merge([
    {
        label: plugin.settings.pluginName|t('smart-links'),
        url: url('smart-links')
    }
]) %}

{% if smartLink.id %}
    {% set crumbs = crumbs|merge([{
        label: smartLink.title,
        url: url('smart-links/smartlinks/' ~ smartLink.id)
    }]) %}

{% endif %}

{% block contextMenu %}
    {# No revisions support for now #}
{% endblock %}


{% block actionButton %}
    {% if smartLink.id %}
        <div class="preview-btn-container btngroup">
            <a href="{{ smartLink.getRedirectUrl() }}" target="_blank" class="view-btn btn" aria-label="{{ 'View'|t('app') }}">{{ 'View'|t('app') }}</a>
        </div>
    {% endif %}
    <div class="btngroup">
        <button type="submit" class="btn submit">{{ "Save"|t('app') }}</button>
    </div>
    {% if smartLink.id %}
        <button type="button" id="action-btn" class="btn menubtn action-btn hairline-dark m" title="{{ 'Actions'|t('app') }}" aria-controls="action-menu" aria-label="{{ 'Actions'|t('app') }}" data-disclosure-trigger="true" aria-expanded="false"></button>
        <div id="action-menu" class="menu menu--disclosure">
            <ul>
                <li>
                    <button type="button" class="menu-item" id="action-duplicate">
                        <span class="icon fuchsia">{{ svg('@app/icons/clone.svg') }}</span>
                        <span class="menu-item-label">{{ "Duplicate"|t('app') }}</span>
                    </button>
                </li>
            </ul>
            <hr class="padded">
            <ul>
                <li>
                    <button class="menu-item error formsubmit" data-destructive data-action="smart-links/smart-links/delete" data-params='{"id":{{ smartLink.id }}}' data-confirm="{{ 'Are you sure you want to delete this entry?'|t('app') }}" data-redirect="{{ 'smart-links'|hash }}" data-headers='{"Accept":"application/json"}'>
                        <span class="icon">{{ svg('@app/icons/trash.svg') }}</span>
                        <span class="menu-item-label">{{ "Delete"|t('app') }}</span>
                    </button>
                </li>
            </ul>
        </div>
    {% endif %}
{% endblock %}


{# Display validation errors summary before content #}
{% if smartLink is defined and smartLink.hasErrors() %}
    {% set errorList = [] %}
    {% for attribute, errors in smartLink.getErrors() %}
        {% for error in errors %}
            {% set errorList = errorList|merge([{
                attribute: attribute,
                message: error
            }]) %}
        {% endfor %}
    {% endfor %}

    {% set errorSummary %}
        <div class="error-summary" tabindex="-1">
            <div>
                <span class="notification-icon" data-icon="alert" aria-label="error" role="img"></span>
                <h2>{{ 'Found {count, number} {count, plural, =1{error} other{errors}}'|t('app', {count: errorList|length}) }}</h2>
            </div>
            <ul class="errors">
                {% for error in errorList %}
                    <li>
                        <a href="#" data-field-error-key="{{ error.attribute }}">{{ error.message }}</a>
                    </li>
                {% endfor %}
            </ul>
        </div>
    {% endset %}
{% endif %}

{% block content %}
    <input type="hidden" name="action" value="smart-links/smart-links/save">
    {{ redirectInput('smart-links') }}
    {% if smartLink.id %}
        <input type="hidden" name="smartLinkId" value="{{ smartLink.id }}">
        <input type="hidden" name="id" value="{{ smartLink.id }}">
    {% endif %}
    {% if craft.app.sites.getTotalEditableSites() > 1 %}
        <input type="hidden" name="siteId" value="{{ smartLink.siteId }}">
    {% endif %}

        <div id="fields">
        {% include "smart-links/smartlinks/_partials/fields" %}
    </div>

    {# Render field layout tabs #}
    {% set fieldLayout = smartLink.getFieldLayout() %}
    {% if fieldLayout %}
        {% for tab in fieldLayout.getTabs() %}
            {% set tabId = 'tab-' ~ tab.id %}
            <div id="{{ tabId }}" class="hidden">
                {% for element in tab.getElements() %}
                    {{ element.formHtml(smartLink, smartLink.getIsRevision())|raw }}
                {% endfor %}
            </div>
        {% endfor %}
    {% endif %}

    {% if craft.smartLinks.settings.enableAnalytics and smartLink.id and (smartLink.trackAnalytics ?? true) %}
        <div id="analytics" class="hidden">
            {% include "smart-links/smartlinks/_partials/analytics" with {
                smartLink: smartLink,
                analyticsService: analyticsService ?? null,
                settings: craft.smartLinks.settings
            } %}
        </div>
    {% endif %}
{% endblock %}

{% block details %}
    <div class="meta">
        <div id="slug-field" class="field" data-attribute="slug">
            <div class="heading">
                <label id="slug-label" for="slug">{{ "Slug"|t('app') }}
                    {% if craft.app.getIsMultiSite() %}
                        <craft-tooltip placement="bottom" max-width="200px" text="{{ 'This field is translated for each site.'|t('app') }}" delay="1000">
                            <button type="button" class="t9n-indicator prevent-autofocus" data-icon="language" aria-label="{{ 'This field is translated for each site.'|t('app') }}" style="pointer-events: auto;"></button>
                        </craft-tooltip>
                    {% endif %}
                </label>
            </div>
            <div class="input ltr">
                <input type="text" id="slug" class="text fullwidth" name="slug" value="{{ smartLink.slug }}" autocomplete="off" autocorrect="off" autocapitalize="none" dir="ltr" aria-labelledby="slug-label" {% if smartLink.getErrors('slug') %}aria-describedby="slug-errors" aria-invalid="true"{% endif %}>
            </div>
            {% if smartLink.getErrors('slug') %}
                <ul class="errors" id="slug-errors">
                    {% for error in smartLink.getErrors('slug') %}
                        <li>{{ error }}</li>
                    {% endfor %}
                </ul>
            {% endif %}
        </div>

        {# Author field #}
        {{ forms.elementSelectField({
            label: "Author"|t('app'),
            id: 'authorId',
            name: 'authorId',
            elementType: 'craft\\elements\\User',
            elements: smartLink.id and smartLink.getAuthor() ? [smartLink.getAuthor()] : [currentUser],
            sources: '*',
            criteria: {
                status: null
            },
            limit: 1,
            viewMode: 'small'
        }) }}

        {{ forms.dateTimeField({
            label: "Post Date"|t('app'),
            id: 'postDate',
            name: 'postDate',
            value: smartLink.postDate ?? smartLink.dateCreated ?? now,
            showTimeZone: false
        }) }}

        {{ forms.dateTimeField({
            label: "Expiry Date"|t('app'),
            id: 'expiryDate',
            name: 'expiryDate',
            value: smartLink.dateExpired,
            showTimeZone: false
        }) }}
    </div>

    <fieldset>
        <legend class="h6">Status</legend>
        <div class="meta">
            {{ forms.lightswitchField({
                label: "Enabled"|t('app'),
                id: 'enabled',
                name: 'enabled',
                on: smartLink.enabled
            }) }}
        </div>
    </fieldset>

    {% if craft.smartLinks.settings.enableAnalytics %}
        <fieldset>
            <legend class="h6">{{ "Analytics"|t('smart-links') }}</legend>
            <div class="meta">
                {{ forms.lightswitchField({
                    label: "Track Analytics"|t('smart-links'),
                    id: 'trackAnalytics',
                    name: 'trackAnalytics',
                    on: smartLink.trackAnalytics ?? true
                }) }}
            </div>
        </fieldset>
    {% else %}
        {# Hidden field to ensure trackAnalytics is set to false when analytics are disabled #}
        <input type="hidden" name="trackAnalytics" value="0">
    {% endif %}

    <fieldset>
        <legend class="h6">{{ "QR Code"|t('smart-links') }}</legend>
        <div class="meta">
            {{ forms.lightswitchField({
                label: "Enable QR Code"|t('smart-links'),
                id: 'qrCodeEnabled',
                name: 'qrCodeEnabled',
                on: smartLink.qrCodeEnabled ?? true,
                toggle: 'qr-settings'
            }) }}
        </div>

        <div id="qr-settings" class="meta {{ not (smartLink.qrCodeEnabled ?? true) ? 'hidden' }}">
            {% if smartLink.id %}
                <div class="field nested">
                    <div class="heading">
                        <label>{{ "Preview"|t('smart-links') }}</label>
                    </div>
                    <div class="input" style="text-align: center;">
                        <a href="{{ smartLink.getQrCodeDisplayUrl() }}" target="_blank" title="{{ 'Click to view QR code page'|t('smart-links') }}">
                            <img id="qr-preview"
                                 src="{{ smartLink.getQrCodeUrl({ size: 150 }) }}"
                                 alt="QR Code Preview"
                                 style="max-width: 150px; height: auto; border: 1px solid #e3e5e8; background: {{ smartLink.qrCodeBgColor ?? '#FFFFFF' }}; cursor: pointer;">
                        </a>
                    </div>
                </div>
            {% endif %}

            {{ forms.textField({
                label: "Size"|t('smart-links'),
                id: 'qrCodeSize',
                name: 'qrCodeSize',
                value: smartLink.qrCodeSize ?? 256,
                type: 'number',
                min: 100,
                max: 1000,
                size: 5,
                fieldClass: 'nested'
            }) }}

            {{ forms.colorField({
                label: "Color"|t('smart-links'),
                id: 'qrCodeColor',
                name: 'qrCodeColor',
                value: smartLink.qrCodeColor ?: craft.smartLinks.settings.defaultQrColor,
                fieldClass: 'nested'
            }) }}

            {{ forms.colorField({
                label: "Background"|t('smart-links'),
                id: 'qrCodeBgColor',
                name: 'qrCodeBgColor',
                value: smartLink.qrCodeBgColor ?: craft.smartLinks.settings.defaultQrBgColor,
                fieldClass: 'nested'
            }) }}

            {{ forms.colorField({
                label: "Eye Color"|t('smart-links'),
                instructions: "Color for position markers (leave empty to use main color)"|t('smart-links'),
                id: 'qrCodeEyeColor',
                name: 'qrCodeEyeColor',
                value: smartLink.qrCodeEyeColor ?: (craft.smartLinks.settings.qrEyeColor ?? ''),
                fieldClass: 'nested'
            }) }}

            {% set defaultFormat = craft.smartLinks.settings.defaultQrFormat ?? 'png' %}
            {{ forms.selectField({
                label: "Format"|t('smart-links'),
                instructions: "Override the default QR code format"|t('smart-links'),
                id: 'qrCodeFormat',
                name: 'qrCodeFormat',
                value: smartLink.qrCodeFormat ?? '',
                options: [
                    {label: 'Use Default (' ~ defaultFormat|upper ~ ')'|t('smart-links'), value: ''},
                    {label: 'PNG', value: 'png'},
                    {label: 'SVG', value: 'svg'},
                ],
                fieldClass: 'nested'
            }) }}

            {# QR Logo field (only show if logos are enabled in settings) #}
            {% if craft.smartLinks.settings.enableQrLogo %}
                {% set logoSources = craft.smartLinks.settings.qrLogoVolumeUid ? ['volume:' ~ craft.smartLinks.settings.qrLogoVolumeUid] : '*' %}
                {% set selectedLogo = null %}
                {% if smartLink.qrLogoId %}
                    {% set selectedLogo = craft.assets.id(smartLink.qrLogoId).one() %}
                {% elseif craft.smartLinks.settings.defaultQrLogoId %}
                    {% set selectedLogo = craft.assets.id(craft.smartLinks.settings.defaultQrLogoId).one() %}
                {% endif %}

                {{ forms.elementSelectField({
                    label: "Logo"|t('smart-links'),
                    instructions: smartLink.qrLogoId ? "Override the default QR code logo"|t('smart-links') : "Using default logo from settings (click to override)"|t('smart-links'),
                    id: 'qrLogoId',
                    name: 'qrLogoId',
                    elementType: 'craft\\elements\\Asset',
                    sources: logoSources,
                    criteria: {
                        kind: ['image']
                    },
                    limit: 1,
                    elements: selectedLogo ? [selectedLogo] : [],
                    fieldClass: 'nested'
                }) }}
            {% endif %}

            <div class="field nested" style="margin-top: 15px;">
                <div class="heading">
                    <label>{{ "Actions"|t('smart-links') }}</label>
                </div>
                <div class="input">
                    <div class="btngroup">
                        <button type="button" class="btn menubtn" data-icon="settings">{{ "QR Code Actions"|t('smart-links') }}</button>
                        <div class="menu">
                            <ul>
                                {% if craft.smartLinks.settings.enableQrDownload and smartLink.id %}
                                    <li>
                                        <h6>{{ "Download QR Code"|t('smart-links') }}</h6>
                                        <ul>
                                            <li><a class="download-qr" data-size="256" href="#">{{ "Small (256px)"|t('smart-links') }}</a></li>
                                            <li><a class="download-qr" data-size="512" href="#">{{ "Medium (512px)"|t('smart-links') }}</a></li>
                                            <li><a class="download-qr" data-size="1024" href="#">{{ "Large (1024px)"|t('smart-links') }}</a></li>
                                            <li><a class="download-qr" data-size="2048" href="#">{{ "Extra Large (2048px)"|t('smart-links') }}</a></li>
                                            <li><a class="download-qr" data-size="custom" href="#">{{ "Custom Size..."|t('smart-links') }}</a></li>
                                        </ul>
                                    </li>
                                    <hr>
                                {% endif %}
                                <li><a id="reset-qr-defaults" href="#">{{ "Reset to Defaults"|t('smart-links') }}</a></li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </fieldset>

    {% if smartLink.id %}
        <dl class="meta read-only">
            <div class="data">
                <dt class="heading">{{ "ID"|t('app') }}</dt>
                <dd class="value">{{ smartLink.id }}</dd>
            </div>
            <div class="data">
                <dt class="heading">{{ "Status"|t('app') }}</dt>
                <dd class="value">
                    {% set status = smartLink.getStatus() %}
                    {% if status == 'expired' %}
                        <span class="status expired"></span>
                        <span>{{ 'Expired'|t('app') }}</span>
                    {% elseif status == 'pending' %}
                        <span class="status pending"></span>
                        <span>{{ 'Pending'|t('app') }}</span>
                    {% elseif status == 'disabled' %}
                        <span class="status disabled"></span>
                        <span>{{ 'Disabled'|t('app') }}</span>
                    {% else %}
                        <span class="status live"></span>
                        <span>{{ 'Live'|t('app') }}</span>
                    {% endif %}
                </dd>
            </div>
            {% if craft.smartLinks.settings.enableAnalytics and smartLink.id and (smartLink.trackAnalytics ?? true) %}
                <div class="data">
                    <dt class="heading">{{ "Interactions"|t('smart-links') }}</dt>
                    <dd class="value">{{ smartLink.clicks|number }}</dd>
                </div>
            {% endif %}
            <div class="data">
                <dt class="heading">{{ "Created at"|t('app') }}</dt>
                <dd class="value">{{ smartLink.dateCreated|datetime('short') }}</dd>
            </div>
            <div class="data">
                <dt class="heading">{{ "Updated at"|t('app') }}</dt>
                <dd class="value">{{ smartLink.dateUpdated|datetime('short') }}</dd>
            </div>
        </dl>
    {% endif %}
{% endblock %}

{% js %}
    // Auto-generate slug from title
    {% if not smartLink.id %}
        $(document).ready(function() {
            new Craft.SlugGenerator('#title', '#slug');
        });
    {% endif %}

    // Remove custom unsaved changes detection - Craft handles this natively
    // The fullPageForm = true setting in the template enables Craft's built-in form change tracking

    // Date/time fields and lightswitches are initialized automatically by Craft's form macros


    {% if smartLink.id %}
        // Live QR code preview
        (function() {
            const qrPreview = document.getElementById('qr-preview');
            if (!qrPreview) {
                return;
            }

            const qrLink = qrPreview.closest('a');
            const colorInput = document.getElementById('qrCodeColor');
            const bgColorInput = document.getElementById('qrCodeBgColor');
            const eyeColorInput = document.getElementById('qrCodeEyeColor');
            const sizeInput = document.getElementById('qrCodeSize');
            const formatSelect = document.getElementById('qrCodeFormat');
            const baseUrl = '{{ siteUrl((craft.app.plugins.getPlugin('smart-links').settings.qrPrefix ?: 'qr') ~ '/' ~ smartLink.slug) }}';
            let updateTimeout;

            function updateQrCode() {
                // Clear previous timeout
                clearTimeout(updateTimeout);

                // Debounce updates
                updateTimeout = setTimeout(function() {
                    // Get color values - Craft's color input doesn't include #
                    const color = (colorInput.value || '000000').replace(/^#/, '');
                    const bgColor = (bgColorInput.value || 'FFFFFF').replace(/^#/, '');
                    const eyeColor = eyeColorInput.value ? eyeColorInput.value.replace(/^#/, '') : '';
                    const size = sizeInput.value || 256;

                    // Add loading state
                    qrPreview.style.opacity = '0.5';

                    // Create new image to preload
                    const newImg = new Image();
                    newImg.onload = function() {
                        qrPreview.src = this.src;
                        qrPreview.style.opacity = '1';
                    };

                    newImg.onerror = function() {
                        qrPreview.style.opacity = '1';
                    };

                    // Get the format - use selected value or default
                    const formatValue = formatSelect ? formatSelect.value : '';
                    const format = formatValue || '{{ craft.smartLinks.settings.defaultQrFormat ?? 'png' }}';

                    // Build parameters
                    let params = `size=150&color=${color}&bg=${bgColor}&format=${format}&margin={{ craft.smartLinks.settings.defaultQrMargin }}`;
                    let fullSizeParams = `size=${size}&color=${color}&bg=${bgColor}&format=${format}&margin={{ craft.smartLinks.settings.defaultQrMargin }}`;

                    // Add eye color if set
                    if (eyeColor) {
                        params += `&eyeColor=${eyeColor}`;
                        fullSizeParams += `&eyeColor=${eyeColor}`;
                    }

                    {% if craft.smartLinks.settings.enableQrLogo %}
                    // Add logo parameter if one is selected OR use default logo
                    const logoField = document.querySelector('#qrLogoId-field .elements');
                    let logoId = null;

                    if (logoField) {
                        const selectedLogo = logoField.querySelector('.element');
                        if (selectedLogo) {
                            logoId = selectedLogo.dataset.id;
                        }
                    }

                    // If no specific logo selected, use default logo from settings
                    if (!logoId && {{ craft.smartLinks.settings.defaultQrLogoId ?? 'null' }}) {
                        logoId = {{ craft.smartLinks.settings.defaultQrLogoId ?? 'null' }};
                    }

                    if (logoId) {
                        params += `&logo=${logoId}`;
                        fullSizeParams += `&logo=${logoId}`;
                    }
                    {% endif %}

                    // Update QR code image
                    const newSrc = `${baseUrl}?${params}&t=${Date.now()}`;
                    newImg.src = newSrc;

                    // Update preview background immediately
                    qrPreview.style.background = '#' + bgColor;

                    // Update link to full size
                    if (qrLink) {
                        qrLink.href = `${baseUrl}?${fullSizeParams}`;
                    }
                }, 150); // Debounce delay
            }

            // Function to watch for color changes with proper Craft integration
            function setupColorListeners(input, name) {
                if (!input) {
                    return;
                }

                // Standard input events
                ['input', 'change', 'keyup', 'blur', 'paste'].forEach(event => {
                    input.addEventListener(event, updateQrCode);
                });

                // Watch for value changes via MutationObserver
                const observer = new MutationObserver((mutations) => {
                    mutations.forEach((mutation) => {
                        if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
                            updateQrCode();
                        }
                    });
                });

                observer.observe(input, {
                    attributes: true,
                    attributeFilter: ['value']
                });

                // Find the actual color picker button (Craft uses a button that opens a color picker)
                const field = input.closest('.field');
                if (field) {
                    // Look for Craft's color picker button
                    const colorButton = field.querySelector('.color-input-button, .color-container button, button[type="button"]');
                    if (colorButton) {
                        // When the button is clicked, watch for value changes
                        colorButton.addEventListener('click', () => {
                            // Poll for changes as the color picker updates
                            let lastValue = input.value;
                            const checkInterval = setInterval(() => {
                                if (input.value !== lastValue) {
                                    lastValue = input.value;
                                    updateQrCode();
                                }
                            }, 100);

                            // Stop polling after 30 seconds
                            setTimeout(() => clearInterval(checkInterval), 30000);
                        });
                    }
                }
            }

            // Set up color listeners
            setupColorListeners(colorInput, 'Color');
            setupColorListeners(bgColorInput, 'Background Color');
            setupColorListeners(eyeColorInput, 'Eye Color');

            // Size input
            if (sizeInput) {
                sizeInput.addEventListener('input', updateQrCode);
                sizeInput.addEventListener('change', updateQrCode);
            }

            // Format select
            if (formatSelect) {
                formatSelect.addEventListener('change', updateQrCode);
            }

            // Also update when the QR code is toggled on
            const qrToggle = document.getElementById('qrCodeEnabled');
            if (qrToggle) {
                qrToggle.addEventListener('change', function() {
                    if (this.classList.contains('on')) {
                        setTimeout(updateQrCode, 100); // Small delay to ensure DOM is ready
                    }
                });
            }

            // Global event delegation for any change events on our inputs
            document.addEventListener('input', function(e) {
                if (e.target === colorInput || e.target === bgColorInput || e.target === eyeColorInput) {
                    updateQrCode();
                }
            }, true);

            // Watch for Craft's custom events
            if (typeof Craft !== 'undefined' && Craft.cp) {
                // Hook into Craft's CP JavaScript if available
                const checkForChanges = () => {
                    if (colorInput && colorInput.value !== colorInput.dataset.lastValue) {
                        colorInput.dataset.lastValue = colorInput.value;
                        updateQrCode();
                    }
                    if (bgColorInput && bgColorInput.value !== bgColorInput.dataset.lastValue) {
                        bgColorInput.dataset.lastValue = bgColorInput.value;
                        updateQrCode();
                    }
                    if (eyeColorInput && eyeColorInput.value !== eyeColorInput.dataset.lastValue) {
                        eyeColorInput.dataset.lastValue = eyeColorInput.value;
                        updateQrCode();
                    }
                };

                // Store initial values
                if (colorInput) colorInput.dataset.lastValue = colorInput.value;
                if (bgColorInput) bgColorInput.dataset.lastValue = bgColorInput.value;
                if (eyeColorInput) eyeColorInput.dataset.lastValue = eyeColorInput.value;

                // Check periodically
                setInterval(checkForChanges, 500);

                // Also listen for Craft's field changed event
                if (typeof Craft.BaseElementEditor !== 'undefined') {
                    Garnish.on(Craft.BaseElementEditor, 'onFieldChange', (e) => {
                        updateQrCode();
                    });
                }

                // Try to hook into Craft's color field specifically
                $(document).on('change', '.color-field input[type="text"]', function() {
                    updateQrCode();
                });

                // Also try Garnish events
                if (typeof Garnish !== 'undefined') {
                    $(colorInput).on('change textchange input', updateQrCode);
                    $(bgColorInput).on('change textchange input', updateQrCode);
                    $(eyeColorInput).on('change textchange input', updateQrCode);
                }
            }

            // Final fallback - watch the color display elements themselves
            const watchColorDisplay = () => {
                const colorDisplays = document.querySelectorAll('.color-field .color-preview, .color-field .color-container');
                colorDisplays.forEach(display => {
                    const observer = new MutationObserver(() => {
                        updateQrCode();
                    });
                    observer.observe(display, { attributes: true, attributeFilter: ['style'] });
                });
            };

            // Wait a bit for Craft to initialize color fields
            setTimeout(watchColorDisplay, 1000);

            {% if craft.smartLinks.settings.enableQrLogo %}
            // Watch for logo field changes
            const logoFieldContainer = document.getElementById('qrLogoId-field');
            if (logoFieldContainer) {
                // Watch for changes to the element field
                const observer = new MutationObserver(() => {
                    updateQrCode();
                });

                observer.observe(logoFieldContainer, {
                    childList: true,
                    subtree: true,
                    attributes: true,
                    characterData: true
                });
            }
            {% endif %}
        })();
    {% endif %}

    // Download QR code dropdown
    $('.download-qr').on('click', function(e) {
        e.preventDefault();

        let size = $(this).data('size');

        // Handle custom size
        if (size === 'custom') {
            const customSize = prompt('{{ "Enter custom size (100-4096 pixels):"|t('smart-links')|e('js') }}', '1024');
            if (!customSize) return;

            size = parseInt(customSize);
            if (isNaN(size) || size < 100 || size > 4096) {
                alert('{{ "Please enter a valid size between 100 and 4096 pixels"|t('smart-links')|e('js') }}');
                return;
            }
        }

        const color = ($('#qrCodeColor').val() || '000000').replace(/^#/, '');
        const bgColor = ($('#qrCodeBgColor').val() || 'FFFFFF').replace(/^#/, '');
        const eyeColor = $('#qrCodeEyeColor').val() ? $('#qrCodeEyeColor').val().replace(/^#/, '') : '';
        const format = $('#qrCodeFormat').val() || '{{ craft.smartLinks.settings.defaultQrFormat ?? 'png' }}';

        // Build download URL
        let downloadUrl = '{{ siteUrl((craft.app.plugins.getPlugin('smart-links').settings.qrPrefix ?: 'qr') ~ '/' ~ smartLink.slug) }}' +
            '?size=' + size +
            '&color=' + color +
            '&bg=' + bgColor +
            '&format=' + format +
            '&download=1';

        // Add eye color if set
        if (eyeColor) {
            downloadUrl += '&eyeColor=' + eyeColor;
        }

        // Create temporary link and click it
        const link = document.createElement('a');
        link.href = downloadUrl;
        {% set filename = craft.smartLinks.settings.qrDownloadFilename ?? '{slug}-qr-{size}' %}
        {% set filename = filename|replace({'{slug}': smartLink.slug}) %}
        const finalFilename = '{{ filename }}'.replace('{size}', size).replace('{format}', format);
        link.download = `${finalFilename}.${format}`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    });

    // Reset QR code settings to plugin defaults
    $('#reset-qr-defaults').on('click', function(e) {
        e.preventDefault();
        if (!confirm('{{ "Reset QR code settings to plugin defaults?"|t('smart-links')|e('js') }}')) {
            return;
        }

        // Get plugin default values
        const defaults = {
            size: {{ craft.smartLinks.settings.defaultQrSize }},
            color: '{{ craft.smartLinks.settings.defaultQrColor }}',
            bgColor: '{{ craft.smartLinks.settings.defaultQrBgColor }}',
            eyeColor: '{{ craft.smartLinks.settings.qrEyeColor ?? '' }}'
        };

        // Reset form fields
        $('#qrCodeSize').val(defaults.size);
        $('#qrCodeColor').val(defaults.color.replace('#', ''));
        $('#qrCodeBgColor').val(defaults.bgColor.replace('#', ''));
        $('#qrCodeEyeColor').val(defaults.eyeColor.replace('#', ''));

        // Trigger change events to update preview and color displays
        $('#qrCodeSize').trigger('change');
        $('#qrCodeColor').trigger('change').trigger('input');
        $('#qrCodeBgColor').trigger('change').trigger('input');
        $('#qrCodeEyeColor').trigger('change').trigger('input');

        // Update color field displays manually for Craft
        setTimeout(function() {
            const colorPreview = $('#qrCodeColor').closest('.field').find('.color-preview');
            const bgColorPreview = $('#qrCodeBgColor').closest('.field').find('.color-preview');
            const eyeColorPreview = $('#qrCodeEyeColor').closest('.field').find('.color-preview');

            if (colorPreview.length) {
                colorPreview.css('background-color', defaults.color);
            }
            if (bgColorPreview.length) {
                bgColorPreview.css('background-color', defaults.bgColor);
            }
            if (eyeColorPreview.length && defaults.eyeColor) {
                eyeColorPreview.css('background-color', defaults.eyeColor);
            }
        }, 50);

        Craft.cp.displayNotice('{{ "QR code settings reset to defaults"|t('smart-links')|e('js') }}');
    });

    {% if craft.smartLinks.settings.enableAnalytics %}
        // Confirm when disabling analytics tracking
        $('#trackAnalytics').on('change', function() {
            const $toggle = $(this);
            const isEnabled = $toggle.hasClass('on');

            // If turning OFF analytics tracking, show confirmation
            if (!isEnabled) {
                if (!confirm('{{ "Are you sure you want to disable analytics tracking for this {singularName}? This {singularName} will no longer collect visitor data and interactions."|t('smart-links', {singularName: singularName|lower})|e('js') }}')) {
                    // User cancelled, turn the toggle back on
                    $toggle.addClass('on');
                    $toggle.find('input[type="hidden"]').val('1');
                    $toggle.attr('aria-checked', 'true');
                    return false;
                }
            }
        });
    {% endif %}

    // Handle duplicate action
    $('#action-duplicate').on('click', function(e) {
        e.preventDefault();

        // Create form and submit
        const form = $('<form/>', {
            method: 'post',
            action: '',
            style: 'display: none;'
        }).appendTo('body');

        form.append(Craft.getCsrfInput());
        form.append($('<input/>', {
            type: 'hidden',
            name: 'action',
            value: 'elements/duplicate'
        }));
        form.append($('<input/>', {
            type: 'hidden',
            name: 'elementType',
            value: '{{ className(smartLink)|e('js') }}'
        }));
        form.append($('<input/>', {
            type: 'hidden',
            name: 'elementId',
            value: '{{ smartLink.id }}'
        }));
        form.append($('<input/>', {
            type: 'hidden',
            name: 'siteId',
            value: '{{ smartLink.siteId }}'
        }));

        form.submit();
    });
{% endjs %}
